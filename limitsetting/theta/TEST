import sys



def allhadfilter(hname):


#    print hname
    return hname



def build_model__ttbar_allhad(allhadfile, mcstat):

    print "Using All-Had File: ", allhadfile

    mod = build_model_from_rootfile(allhadfile, root_hname_to_convention=allhadfilter, include_mc_uncertainties=True)
    mod.fill_histogram_zerobins()
    mod.set_signal_processes("Zprime*")
    for p in mod.processes:
    	if p == 'qcd': continue
	mod.add_lognormal_uncertainty('lumi', math.log(1.027), p)
        mod.add_lognormal_uncertainty('ttagT', math.log(1.10),p)
    mod.add_lognormal_uncertainty('xsec_ttbar', math.log(1.08), 'ttbar') 

    mod.scale_predictions(42.24246, "Zprime1000", "*")
    mod.scale_predictions(17.03858, "Zprime1250", "*")
    mod.scale_predictions(7.74129, "Zprime1500", "*")
    mod.scale_predictions(2.00723, "Zprime2000", "*")
    mod.scale_predictions(0.63398, "Zprime2500", "*")
    mod.scale_predictions(0.23030, "Zprime3000", "*")
    mod.scale_predictions(0.09387, "Zprime3500", "*")
    mod.scale_predictions(0.04254, "Zprime4000", "*")

    


    return mod


print len(sys.argv)
print sys.argv

infile = [sys.argv[2]]
model = build_model__ttbar_allhad(infile, True)

model_summary(model)

opts = Options()

discVals = dict()

print "running discovery"
print "mass", sys.argv[3]
sys.stdout.flush()
discVals['rsg'] = discovery(model, spid = 'Zprime'+str(sys.argv[3]), use_data = False, maxit = 50)
#discVals['rsg1250'] = discovery(model, spid = 'Zprime1250', use_data = False)
#discVals['rsg1500'] = discovery(model, spid = 'Zprime1500', use_data = False)
#discVals['rsg2000'] = discovery(model, spid = 'Zprime2000', use_data = False)
#discVals['rsg2500'] = discovery(model, spid = 'Zprime2500', use_data = False)
#discVals['rsg3000'] = discovery(model, spid = 'Zprime3000', use_data = False)
#discVals['rsg3500'] = discovery(model, spid = 'Zprime3500', use_data = False)
#discVals['rsg4000'] = discovery(model, spid = 'Zprime4000', use_data = False)



print discVals 

    

options = Options()
options.set('minimizer', 'strategy', 'robust')
options.set('minimizer', 'minuit_tolerance_factor', '10000000')

    #discovery(model, use_data=False, maxit=50, n = 100, n_expected = 100 )
#    pVals = pvalue(model, input='toys:1.0', n = 50, options=options, bkgtoys_n = 100, bkgtoys_n_runs = 3)
#    print pVal

#    options = Options()
#    options.set('minimizer', 'strategy', 'robust')
#    options.set('minimizer', 'minuit_tolerance_factor', '10000000')
#    parVals = mle(model, input='toys:0', n=10, options = options)
#    print parVals
#    parameter_values = {} 
#    parameter_values_nom = {} 
#    for p in model.get_parameters([]):
#        parameter_values[p] = parVals['zpn3000'][p][0][0]
#        parameter_values_nom[p] = 0.0#parVals['zpn3000'][p][0][0]
#    histos = evaluate_prediction(model, parameter_values, include_signal = False)
#    write_histograms_to_rootfile(histos, 'histos-mle.root')
#    histos = evaluate_prediction(model, parameter_values_nom, include_signal = False)
#    write_histograms_to_rootfile(histos, 'histos-nom.root')


   # exp.write_txt("limits_combo_test.txt")
   # obs.write_txt("limits_obs_combo_test.txt")
   # o_file = open('limits.txt', 'w')
   # for i in range(len(exp.x)):
   #     o_file.write( '%.2f %.5f' % (exp.x[i], exp.y[i]))
   #     o_file.write(' %.5f %.5f' % (exp.bands[1][1][i], exp.bands[1][0][i]))
   #     o_file.write(' %.5f %.5f' % (exp.bands[0][1][i], exp.bands[0][0][i]))
   #     o_file.write(' %.5f'      % (obs.y[i] if obs else -1.))
   #     o_file.write('\n')
   # o_file.close()
